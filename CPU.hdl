// Brandon Gonzales, 727002611

CHIP CPU{

    IN  fromM[16],          // M value input  (M = contents of RAM[Address])
        In[16],    	    // Instruction for execution
        Reset;              // Signals whether to re-start the current
                            // program (Reset==1) or continue executing
                            // the current program (Reset==0).

    OUT toM[16],            // M value output
        writeM,             // Write to M 
        addressM[16],       // Address in data memory (of M)
        PCOut[16];          // address of next instruction

    PARTS:
    // Add your code here

    Mux16(a = AluOut, b = fromM, sel = In[15], out = fM);

    // reg 0 - 7 starting at 0
    Register(in = fM, load = l0, out = r0);
    Register(in = fM, load = l1, out = r1);
    Register(in = fM, load = l2, out = r2);
    Register(in = fM, load = l3, out = r3);
    Register(in = fM, load = l4, out = r4);
    Register(in = fM, load = l5, out = r5);
    Register(in = fM, load = l6, out = r6);
    Register(in = fM, load = l7, out = r7);

    // feeding registers into muxs
    Mux8Way16(a = r0, b = r1, c = r2, d = r3, e = r4, f = r5, g = r6, h = r7, sel = In[6..8], out = m1);

    Mux8Way16(a = r0, b = r1, c = r2, d = r3, e = r4, f = r5, g = r6, h = r7, sel = In[3..5], out = m2);

    // mux to handle constant
    Mux16(a = m2, b[0..5] = In[0..5], b[6..15] = false, sel = const, out = y);

    // ALU
    ALU(AluOp = In[12..15], x = m1, y = y,AluOut = AluOut, overflow = throwaway);

    // mux to feed into memory
    Mux8Way16(a = r0, b = r1, c = r2, d = r3, e = r4, f = r5, g = r6, h = r7, sel = In[6..8], out = toM, out = forPC); //extra out for BEQ

    // mux to feed into PC
    Mux8Way16(a = r0, b = r1, c = r2, d = r3, e = r4, f = r5, g = r6, h = r7, sel = In[9..11], out = intoPC);

    //PC
    PC(in = intoPC, load = loadPC, inc = true, reset = Reset, out = PCOut);


    // determine loading into registers
    Not(in = In[15], out = arithAndLog);
    Or(a = In[15], b = In[14], out = R); //  1/3 of Read 
    Nor(a = In[13], b = In[12], out = R2); // 2/3 for Read
    And(a = R, b = R2, out = R3); // 3/3
    And(a = In[15], b = In[14], out = inp1); // 1/4 for input
    Not(in = In[12], out = inp2); // 2/4
    And(a = In[13], b = inp2, out = inp3);  // 3/4
    And(a = inp1, b = inp3, out = inp4); // 4/4
    Or(a = arithAndLog, b = R3, out = loadDetermine1); 
    Or(a = loadDetermine1, b = inp4, out = loadDetermined);
    DMux8Way(in = loadDetermined, sel = In[9..11], a = l0, b = l1, c = l2, d = l3, e = l4, f = l5, g = l6, h = l7);

    // determine if we're using constants
    Nor(a = In[15], b = In[14], out = arith); 
    And(a = arith, b = In[12], out = const);

    // determine if we are writing into memory
    Not(in = In[14], out = write1);
    Not(in = In[12], out = write2);
    And(a = In[15], b = write1, out = write3);
    And(a = write3, b = In[13], out = write4);
    And(a = write4, b = write2, out = writeF); // determined if write
    Nor(a = In[13], b = In[12], out = out1);
    And(a = In[15], b = In[14], out = out2);
    And(a = out2, b = out1, out = outF); // determined if out
    Or(a = writeF, b = outF, out = writeM);

    // determine address 
    Mux8Way16(a = r0, b = r1, c = r2, d = r3, e = r4, f = r5, g = r6, h = r7, sel = In[6..8], out = addressM1);
    Mux8Way16(a = r0, b = r1, c = r2, d = r3, e = r4, f = r5, g = r6, h = r7, sel = In[9..11], out = addressM2);
    Mux4Way16(a = addressM1, b = addressM2, c = addressM2, d[15] = true, d[14] = false, d[13] = true, sel = In[13..14], out = addressM);

    // determine PC functionality
    Not(in = In[14], out = jmp1);
    And(a = In[15], b = jmp1, out = jmp2);
    And(a = jmp2, b = In[12], out = jmpF); // checks to see if branch 

    Or16Way(in = forPC, out = beq);
    Not(in = beq, out = beqF); // checks if src reg is 0

    Mux(a = false, b = beqF, sel = jmpF, out = beqFF);
    Mux(a = false, b = In[13], sel = jmpF, out = selBranch); // checks if branch 

    Mux(a = beqFF, b = jmpF, sel = selBranch, out = loadPC); // if brach load depending on type

}